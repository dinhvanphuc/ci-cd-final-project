---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: Clean up a workspace by deleting all the files.
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from $(workspaces.source.path) ..."
        if [ -d "$(workspaces.source.path)" ]; then
          rm -rf "$(workspaces.source.path)"/*
          rm -rf "$(workspaces.source.path)"/.[!.]*
          rm -rf "$(workspaces.source.path)"/..?*
        fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flake8-lint
spec:
  description: Run flake8 lint check on Python code.
  params:
    - name: args
      description: Arguments to pass to flake8
      type: string
      default: "--count --max-complexity=10 --max-line-length=127"
  workspaces:
    - name: source
  steps:
    - name: lint
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        set -e
        python -m pip install --upgrade pip
        python -m pip install flake8
        flake8 . $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        python -m pip install nose
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y requirements.txt, b·ªè qua b∆∞·ªõc c√†i ƒë·∫∑t."
        fi
        nosetests $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
spec:
  description: Build and push application image using Buildah.
  params:
    - name: IMAGE
      description: Reference of the image buildah will produce
      type: string
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image
      type: string
      default: "quay.io/buildah/stable:v1.31.0"
    - name: STORAGE_DRIVER
      description: Set buildah storage driver
      type: string
      default: "vfs"
    - name: DOCKERFILE
      description: Path to the Dockerfile to build
      type: string
      default: "Dockerfile"
    - name: CONTEXT
      description: Build context directory
      type: string
      default: "."
  workspaces:
    - name: source
  steps:
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: STORAGE_DRIVER
          value: $(params.STORAGE_DRIVER)
      script: |
        #!/bin/bash
        set -e
        echo "üî® Building image $(params.IMAGE) from $(params.DOCKERFILE)"
        buildah bud --storage-driver=$STORAGE_DRIVER -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)
        echo "üì§ Pushing image to registry: $(params.IMAGE)"
        buildah push --storage-driver=$STORAGE_DRIVER $(params.IMAGE) docker://$(params.IMAGE)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: oc-deploy
spec:
  description: Deploy application to OpenShift using oc CLI.
  params:
    - name: app-name
      type: string
      description: T√™n ·ª©ng d·ª•ng ƒë·ªÉ deploy
    - name: build-image
      type: string
      description: Image ƒë√£ ƒë∆∞·ª£c build v√† push
  steps:
    - name: deploy
      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/bin/bash
        set -e
        echo "üöÄ Deploying $(params.app-name) with image $(params.build-image)"
        oc create deployment $(params.app-name) --image=$(params.build-image) --dry-run=client -o yaml | oc apply -f -
